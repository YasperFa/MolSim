// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "schema.h"

// OutputType
// 

const OutputType::baseName_optional& OutputType::
baseName () const
{
  return this->baseName_;
}

OutputType::baseName_optional& OutputType::
baseName ()
{
  return this->baseName_;
}

void OutputType::
baseName (const baseName_type& x)
{
  this->baseName_.set (x);
}

void OutputType::
baseName (const baseName_optional& x)
{
  this->baseName_ = x;
}

void OutputType::
baseName (::std::unique_ptr< baseName_type > x)
{
  this->baseName_.set (std::move (x));
}

const OutputType::writeFrequency_optional& OutputType::
writeFrequency () const
{
  return this->writeFrequency_;
}

OutputType::writeFrequency_optional& OutputType::
writeFrequency ()
{
  return this->writeFrequency_;
}

void OutputType::
writeFrequency (const writeFrequency_type& x)
{
  this->writeFrequency_.set (x);
}

void OutputType::
writeFrequency (const writeFrequency_optional& x)
{
  this->writeFrequency_ = x;
}

OutputType::writeFrequency_type OutputType::
writeFrequency_default_value ()
{
  return writeFrequency_type (10);
}


// CalculatorType
// 

const CalculatorType::calculatorForce_optional& CalculatorType::
calculatorForce () const
{
  return this->calculatorForce_;
}

CalculatorType::calculatorForce_optional& CalculatorType::
calculatorForce ()
{
  return this->calculatorForce_;
}

void CalculatorType::
calculatorForce (const calculatorForce_type& x)
{
  this->calculatorForce_.set (x);
}

void CalculatorType::
calculatorForce (const calculatorForce_optional& x)
{
  this->calculatorForce_ = x;
}

void CalculatorType::
calculatorForce (::std::unique_ptr< calculatorForce_type > x)
{
  this->calculatorForce_.set (std::move (x));
}


// ParametersType
// 

const ParametersType::tEnd_optional& ParametersType::
tEnd () const
{
  return this->tEnd_;
}

ParametersType::tEnd_optional& ParametersType::
tEnd ()
{
  return this->tEnd_;
}

void ParametersType::
tEnd (const tEnd_type& x)
{
  this->tEnd_.set (x);
}

void ParametersType::
tEnd (const tEnd_optional& x)
{
  this->tEnd_ = x;
}

const ParametersType::deltaT_optional& ParametersType::
deltaT () const
{
  return this->deltaT_;
}

ParametersType::deltaT_optional& ParametersType::
deltaT ()
{
  return this->deltaT_;
}

void ParametersType::
deltaT (const deltaT_type& x)
{
  this->deltaT_.set (x);
}

void ParametersType::
deltaT (const deltaT_optional& x)
{
  this->deltaT_ = x;
}


// CuboidType
// 

const CuboidType::position_type& CuboidType::
position () const
{
  return this->position_.get ();
}

CuboidType::position_type& CuboidType::
position ()
{
  return this->position_.get ();
}

void CuboidType::
position (const position_type& x)
{
  this->position_.set (x);
}

void CuboidType::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const CuboidType::dimensions_type& CuboidType::
dimensions () const
{
  return this->dimensions_.get ();
}

CuboidType::dimensions_type& CuboidType::
dimensions ()
{
  return this->dimensions_.get ();
}

void CuboidType::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

void CuboidType::
dimensions (::std::unique_ptr< dimensions_type > x)
{
  this->dimensions_.set (std::move (x));
}

const CuboidType::initialVelocity_type& CuboidType::
initialVelocity () const
{
  return this->initialVelocity_.get ();
}

CuboidType::initialVelocity_type& CuboidType::
initialVelocity ()
{
  return this->initialVelocity_.get ();
}

void CuboidType::
initialVelocity (const initialVelocity_type& x)
{
  this->initialVelocity_.set (x);
}

void CuboidType::
initialVelocity (::std::unique_ptr< initialVelocity_type > x)
{
  this->initialVelocity_.set (std::move (x));
}

const CuboidType::distance_type& CuboidType::
distance () const
{
  return this->distance_.get ();
}

CuboidType::distance_type& CuboidType::
distance ()
{
  return this->distance_.get ();
}

void CuboidType::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const CuboidType::meanVelocity_type& CuboidType::
meanVelocity () const
{
  return this->meanVelocity_.get ();
}

CuboidType::meanVelocity_type& CuboidType::
meanVelocity ()
{
  return this->meanVelocity_.get ();
}

void CuboidType::
meanVelocity (const meanVelocity_type& x)
{
  this->meanVelocity_.set (x);
}

const CuboidType::mass_type& CuboidType::
mass () const
{
  return this->mass_.get ();
}

CuboidType::mass_type& CuboidType::
mass ()
{
  return this->mass_.get ();
}

void CuboidType::
mass (const mass_type& x)
{
  this->mass_.set (x);
}


// PositionType
// 

const PositionType::x_type& PositionType::
x () const
{
  return this->x_.get ();
}

PositionType::x_type& PositionType::
x ()
{
  return this->x_.get ();
}

void PositionType::
x (const x_type& x)
{
  this->x_.set (x);
}

const PositionType::y_type& PositionType::
y () const
{
  return this->y_.get ();
}

PositionType::y_type& PositionType::
y ()
{
  return this->y_.get ();
}

void PositionType::
y (const y_type& x)
{
  this->y_.set (x);
}

const PositionType::z_type& PositionType::
z () const
{
  return this->z_.get ();
}

PositionType::z_type& PositionType::
z ()
{
  return this->z_.get ();
}

void PositionType::
z (const z_type& x)
{
  this->z_.set (x);
}


// DimensionsType
// 

const DimensionsType::x_type& DimensionsType::
x () const
{
  return this->x_.get ();
}

DimensionsType::x_type& DimensionsType::
x ()
{
  return this->x_.get ();
}

void DimensionsType::
x (const x_type& x)
{
  this->x_.set (x);
}

const DimensionsType::y_type& DimensionsType::
y () const
{
  return this->y_.get ();
}

DimensionsType::y_type& DimensionsType::
y ()
{
  return this->y_.get ();
}

void DimensionsType::
y (const y_type& x)
{
  this->y_.set (x);
}

const DimensionsType::z_type& DimensionsType::
z () const
{
  return this->z_.get ();
}

DimensionsType::z_type& DimensionsType::
z ()
{
  return this->z_.get ();
}

void DimensionsType::
z (const z_type& x)
{
  this->z_.set (x);
}


// VelocityType
// 

const VelocityType::x_type& VelocityType::
x () const
{
  return this->x_.get ();
}

VelocityType::x_type& VelocityType::
x ()
{
  return this->x_.get ();
}

void VelocityType::
x (const x_type& x)
{
  this->x_.set (x);
}

const VelocityType::y_type& VelocityType::
y () const
{
  return this->y_.get ();
}

VelocityType::y_type& VelocityType::
y ()
{
  return this->y_.get ();
}

void VelocityType::
y (const y_type& x)
{
  this->y_.set (x);
}

const VelocityType::z_type& VelocityType::
z () const
{
  return this->z_.get ();
}

VelocityType::z_type& VelocityType::
z ()
{
  return this->z_.get ();
}

void VelocityType::
z (const z_type& x)
{
  this->z_.set (x);
}


// simulation
// 

const simulation::output_type& simulation::
output () const
{
  return this->output_.get ();
}

simulation::output_type& simulation::
output ()
{
  return this->output_.get ();
}

void simulation::
output (const output_type& x)
{
  this->output_.set (x);
}

void simulation::
output (::std::unique_ptr< output_type > x)
{
  this->output_.set (std::move (x));
}

const simulation::calculator_type& simulation::
calculator () const
{
  return this->calculator_.get ();
}

simulation::calculator_type& simulation::
calculator ()
{
  return this->calculator_.get ();
}

void simulation::
calculator (const calculator_type& x)
{
  this->calculator_.set (x);
}

void simulation::
calculator (::std::unique_ptr< calculator_type > x)
{
  this->calculator_.set (std::move (x));
}

const simulation::parameters_type& simulation::
parameters () const
{
  return this->parameters_.get ();
}

simulation::parameters_type& simulation::
parameters ()
{
  return this->parameters_.get ();
}

void simulation::
parameters (const parameters_type& x)
{
  this->parameters_.set (x);
}

void simulation::
parameters (::std::unique_ptr< parameters_type > x)
{
  this->parameters_.set (std::move (x));
}

const simulation::cuboids_sequence& simulation::
cuboids () const
{
  return this->cuboids_;
}

simulation::cuboids_sequence& simulation::
cuboids ()
{
  return this->cuboids_;
}

void simulation::
cuboids (const cuboids_sequence& s)
{
  this->cuboids_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// OutputType
//

OutputType::
OutputType ()
: ::xml_schema::type (),
  baseName_ (this),
  writeFrequency_ (this)
{
}

OutputType::
OutputType (const OutputType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  baseName_ (x.baseName_, f, this),
  writeFrequency_ (x.writeFrequency_, f, this)
{
}

OutputType::
OutputType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  baseName_ (this),
  writeFrequency_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void OutputType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // baseName
    //
    if (n.name () == "baseName" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< baseName_type > r (
        baseName_traits::create (i, f, this));

      if (!this->baseName_)
      {
        this->baseName_.set (::std::move (r));
        continue;
      }
    }

    // writeFrequency
    //
    if (n.name () == "writeFrequency" && n.namespace_ ().empty ())
    {
      if (!this->writeFrequency_)
      {
        this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

OutputType* OutputType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class OutputType (*this, f, c);
}

OutputType& OutputType::
operator= (const OutputType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->baseName_ = x.baseName_;
    this->writeFrequency_ = x.writeFrequency_;
  }

  return *this;
}

OutputType::
~OutputType ()
{
}

// CalculatorType
//

CalculatorType::
CalculatorType ()
: ::xml_schema::type (),
  calculatorForce_ (this)
{
}

CalculatorType::
CalculatorType (const CalculatorType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  calculatorForce_ (x.calculatorForce_, f, this)
{
}

CalculatorType::
CalculatorType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  calculatorForce_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CalculatorType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // calculatorForce
    //
    if (n.name () == "calculatorForce" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< calculatorForce_type > r (
        calculatorForce_traits::create (i, f, this));

      if (!this->calculatorForce_)
      {
        this->calculatorForce_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

CalculatorType* CalculatorType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CalculatorType (*this, f, c);
}

CalculatorType& CalculatorType::
operator= (const CalculatorType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->calculatorForce_ = x.calculatorForce_;
  }

  return *this;
}

CalculatorType::
~CalculatorType ()
{
}

// ParametersType
//

ParametersType::
ParametersType ()
: ::xml_schema::type (),
  tEnd_ (this),
  deltaT_ (this)
{
}

ParametersType::
ParametersType (const ParametersType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  tEnd_ (x.tEnd_, f, this),
  deltaT_ (x.deltaT_, f, this)
{
}

ParametersType::
ParametersType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  tEnd_ (this),
  deltaT_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ParametersType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // tEnd
    //
    if (n.name () == "tEnd" && n.namespace_ ().empty ())
    {
      if (!this->tEnd_)
      {
        this->tEnd_.set (tEnd_traits::create (i, f, this));
        continue;
      }
    }

    // deltaT
    //
    if (n.name () == "deltaT" && n.namespace_ ().empty ())
    {
      if (!this->deltaT_)
      {
        this->deltaT_.set (deltaT_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

ParametersType* ParametersType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ParametersType (*this, f, c);
}

ParametersType& ParametersType::
operator= (const ParametersType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->tEnd_ = x.tEnd_;
    this->deltaT_ = x.deltaT_;
  }

  return *this;
}

ParametersType::
~ParametersType ()
{
}

// CuboidType
//

CuboidType::
CuboidType (const position_type& position,
            const dimensions_type& dimensions,
            const initialVelocity_type& initialVelocity,
            const distance_type& distance,
            const meanVelocity_type& meanVelocity,
            const mass_type& mass)
: ::xml_schema::type (),
  position_ (position, this),
  dimensions_ (dimensions, this),
  initialVelocity_ (initialVelocity, this),
  distance_ (distance, this),
  meanVelocity_ (meanVelocity, this),
  mass_ (mass, this)
{
}

CuboidType::
CuboidType (::std::unique_ptr< position_type > position,
            ::std::unique_ptr< dimensions_type > dimensions,
            ::std::unique_ptr< initialVelocity_type > initialVelocity,
            const distance_type& distance,
            const meanVelocity_type& meanVelocity,
            const mass_type& mass)
: ::xml_schema::type (),
  position_ (std::move (position), this),
  dimensions_ (std::move (dimensions), this),
  initialVelocity_ (std::move (initialVelocity), this),
  distance_ (distance, this),
  meanVelocity_ (meanVelocity, this),
  mass_ (mass, this)
{
}

CuboidType::
CuboidType (const CuboidType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  dimensions_ (x.dimensions_, f, this),
  initialVelocity_ (x.initialVelocity_, f, this),
  distance_ (x.distance_, f, this),
  meanVelocity_ (x.meanVelocity_, f, this),
  mass_ (x.mass_, f, this)
{
}

CuboidType::
CuboidType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  dimensions_ (this),
  initialVelocity_ (this),
  distance_ (this),
  meanVelocity_ (this),
  mass_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CuboidType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dimensions_type > r (
        dimensions_traits::create (i, f, this));

      if (!dimensions_.present ())
      {
        this->dimensions_.set (::std::move (r));
        continue;
      }
    }

    // initialVelocity
    //
    if (n.name () == "initialVelocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< initialVelocity_type > r (
        initialVelocity_traits::create (i, f, this));

      if (!initialVelocity_.present ())
      {
        this->initialVelocity_.set (::std::move (r));
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // meanVelocity
    //
    if (n.name () == "meanVelocity" && n.namespace_ ().empty ())
    {
      if (!meanVelocity_.present ())
      {
        this->meanVelocity_.set (meanVelocity_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!initialVelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initialVelocity",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!meanVelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meanVelocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }
}

CuboidType* CuboidType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CuboidType (*this, f, c);
}

CuboidType& CuboidType::
operator= (const CuboidType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->dimensions_ = x.dimensions_;
    this->initialVelocity_ = x.initialVelocity_;
    this->distance_ = x.distance_;
    this->meanVelocity_ = x.meanVelocity_;
    this->mass_ = x.mass_;
  }

  return *this;
}

CuboidType::
~CuboidType ()
{
}

// PositionType
//

PositionType::
PositionType (const x_type& x,
              const y_type& y,
              const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

PositionType::
PositionType (const PositionType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

PositionType::
PositionType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void PositionType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

PositionType* PositionType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class PositionType (*this, f, c);
}

PositionType& PositionType::
operator= (const PositionType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

PositionType::
~PositionType ()
{
}

// DimensionsType
//

DimensionsType::
DimensionsType (const x_type& x,
                const y_type& y,
                const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

DimensionsType::
DimensionsType (const DimensionsType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

DimensionsType::
DimensionsType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void DimensionsType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

DimensionsType* DimensionsType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class DimensionsType (*this, f, c);
}

DimensionsType& DimensionsType::
operator= (const DimensionsType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

DimensionsType::
~DimensionsType ()
{
}

// VelocityType
//

VelocityType::
VelocityType (const x_type& x,
              const y_type& y,
              const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

VelocityType::
VelocityType (const VelocityType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

VelocityType::
VelocityType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void VelocityType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

VelocityType* VelocityType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class VelocityType (*this, f, c);
}

VelocityType& VelocityType::
operator= (const VelocityType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

VelocityType::
~VelocityType ()
{
}

// simulation
//

simulation::
simulation (const output_type& output,
            const calculator_type& calculator,
            const parameters_type& parameters)
: ::xml_schema::type (),
  output_ (output, this),
  calculator_ (calculator, this),
  parameters_ (parameters, this),
  cuboids_ (this)
{
}

simulation::
simulation (::std::unique_ptr< output_type > output,
            ::std::unique_ptr< calculator_type > calculator,
            ::std::unique_ptr< parameters_type > parameters)
: ::xml_schema::type (),
  output_ (std::move (output), this),
  calculator_ (std::move (calculator), this),
  parameters_ (std::move (parameters), this),
  cuboids_ (this)
{
}

simulation::
simulation (const simulation& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  output_ (x.output_, f, this),
  calculator_ (x.calculator_, f, this),
  parameters_ (x.parameters_, f, this),
  cuboids_ (x.cuboids_, f, this)
{
}

simulation::
simulation (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  output_ (this),
  calculator_ (this),
  parameters_ (this),
  cuboids_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // output
    //
    if (n.name () == "output" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< output_type > r (
        output_traits::create (i, f, this));

      if (!output_.present ())
      {
        this->output_.set (::std::move (r));
        continue;
      }
    }

    // calculator
    //
    if (n.name () == "calculator" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< calculator_type > r (
        calculator_traits::create (i, f, this));

      if (!calculator_.present ())
      {
        this->calculator_.set (::std::move (r));
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!parameters_.present ())
      {
        this->parameters_.set (::std::move (r));
        continue;
      }
    }

    // cuboids
    //
    if (n.name () == "cuboids" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboids_type > r (
        cuboids_traits::create (i, f, this));

      this->cuboids_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!output_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "output",
      "");
  }

  if (!calculator_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "calculator",
      "");
  }

  if (!parameters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "parameters",
      "");
  }
}

simulation* simulation::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation (*this, f, c);
}

simulation& simulation::
operator= (const simulation& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->output_ = x.output_;
    this->calculator_ = x.calculator_;
    this->parameters_ = x.parameters_;
    this->cuboids_ = x.cuboids_;
  }

  return *this;
}

simulation::
~simulation ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation_ (isrc, h, f, p);
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation > (
    ::simulation_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation >
simulation_ (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation > (
      ::simulation_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation >
simulation_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation > r (
      ::xsd::cxx::tree::traits< ::simulation, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

