// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CheckpointSchema.h"

// CheckpointType
//

const CheckpointType::SimulationData_type& CheckpointType::
SimulationData () const
{
  return this->SimulationData_.get ();
}

CheckpointType::SimulationData_type& CheckpointType::
SimulationData ()
{
  return this->SimulationData_.get ();
}

void CheckpointType::
SimulationData (const SimulationData_type& x)
{
  this->SimulationData_.set (x);
}

void CheckpointType::
SimulationData (::std::unique_ptr< SimulationData_type > x)
{
  this->SimulationData_.set (std::move (x));
}

const CheckpointType::ParticleData_type& CheckpointType::
ParticleData () const
{
  return this->ParticleData_.get ();
}

CheckpointType::ParticleData_type& CheckpointType::
ParticleData ()
{
  return this->ParticleData_.get ();
}

void CheckpointType::
ParticleData (const ParticleData_type& x)
{
  this->ParticleData_.set (x);
}

void CheckpointType::
ParticleData (::std::unique_ptr< ParticleData_type > x)
{
  this->ParticleData_.set (std::move (x));
}


// SimulationDataType
//

const SimulationDataType::inputFile_type& SimulationDataType::
inputFile () const
{
  return this->inputFile_.get ();
}

SimulationDataType::inputFile_type& SimulationDataType::
inputFile ()
{
  return this->inputFile_.get ();
}

void SimulationDataType::
inputFile (const inputFile_type& x)
{
  this->inputFile_.set (x);
}

void SimulationDataType::
inputFile (::std::unique_ptr< inputFile_type > x)
{
  this->inputFile_.set (std::move (x));
}

const SimulationDataType::endTime_type& SimulationDataType::
endTime () const
{
  return this->endTime_.get ();
}

SimulationDataType::endTime_type& SimulationDataType::
endTime ()
{
  return this->endTime_.get ();
}

void SimulationDataType::
endTime (const endTime_type& x)
{
  this->endTime_.set (x);
}

const SimulationDataType::deltaT_type& SimulationDataType::
deltaT () const
{
  return this->deltaT_.get ();
}

SimulationDataType::deltaT_type& SimulationDataType::
deltaT ()
{
  return this->deltaT_.get ();
}

void SimulationDataType::
deltaT (const deltaT_type& x)
{
  this->deltaT_.set (x);
}

const SimulationDataType::gravity_type& SimulationDataType::
gravity () const
{
  return this->gravity_.get ();
}

SimulationDataType::gravity_type& SimulationDataType::
gravity ()
{
  return this->gravity_.get ();
}

void SimulationDataType::
gravity (const gravity_type& x)
{
  this->gravity_.set (x);
}


// ParticleDataType
//

const ParticleDataType::particle_sequence& ParticleDataType::
particle () const
{
  return this->particle_;
}

ParticleDataType::particle_sequence& ParticleDataType::
particle ()
{
  return this->particle_;
}

void ParticleDataType::
particle (const particle_sequence& s)
{
  this->particle_ = s;
}


// ExtendedParticleType
//

const ExtendedParticleType::position_type& ExtendedParticleType::
position () const
{
  return this->position_.get ();
}

ExtendedParticleType::position_type& ExtendedParticleType::
position ()
{
  return this->position_.get ();
}

void ExtendedParticleType::
position (const position_type& x)
{
  this->position_.set (x);
}

void ExtendedParticleType::
position (::std::unique_ptr< position_type > x)
{
  this->position_.set (std::move (x));
}

const ExtendedParticleType::velocity_type& ExtendedParticleType::
velocity () const
{
  return this->velocity_.get ();
}

ExtendedParticleType::velocity_type& ExtendedParticleType::
velocity ()
{
  return this->velocity_.get ();
}

void ExtendedParticleType::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void ExtendedParticleType::
velocity (::std::unique_ptr< velocity_type > x)
{
  this->velocity_.set (std::move (x));
}

const ExtendedParticleType::mass_type& ExtendedParticleType::
mass () const
{
  return this->mass_.get ();
}

ExtendedParticleType::mass_type& ExtendedParticleType::
mass ()
{
  return this->mass_.get ();
}

void ExtendedParticleType::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const ExtendedParticleType::type_optional& ExtendedParticleType::
type () const
{
  return this->type_;
}

ExtendedParticleType::type_optional& ExtendedParticleType::
type ()
{
  return this->type_;
}

void ExtendedParticleType::
type (const type_type& x)
{
  this->type_.set (x);
}

void ExtendedParticleType::
type (const type_optional& x)
{
  this->type_ = x;
}

const ExtendedParticleType::force_type& ExtendedParticleType::
force () const
{
  return this->force_.get ();
}

ExtendedParticleType::force_type& ExtendedParticleType::
force ()
{
  return this->force_.get ();
}

void ExtendedParticleType::
force (const force_type& x)
{
  this->force_.set (x);
}

void ExtendedParticleType::
force (::std::unique_ptr< force_type > x)
{
  this->force_.set (std::move (x));
}

const ExtendedParticleType::oldForce_type& ExtendedParticleType::
oldForce () const
{
  return this->oldForce_.get ();
}

ExtendedParticleType::oldForce_type& ExtendedParticleType::
oldForce ()
{
  return this->oldForce_.get ();
}

void ExtendedParticleType::
oldForce (const oldForce_type& x)
{
  this->oldForce_.set (x);
}

void ExtendedParticleType::
oldForce (::std::unique_ptr< oldForce_type > x)
{
  this->oldForce_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// CheckpointType
//

CheckpointType::
CheckpointType (const SimulationData_type& SimulationData,
                const ParticleData_type& ParticleData)
: ::xml_schema::type (),
  SimulationData_ (SimulationData, this),
  ParticleData_ (ParticleData, this)
{
}

CheckpointType::
CheckpointType (::std::unique_ptr< SimulationData_type > SimulationData,
                ::std::unique_ptr< ParticleData_type > ParticleData)
: ::xml_schema::type (),
  SimulationData_ (std::move (SimulationData), this),
  ParticleData_ (std::move (ParticleData), this)
{
}

CheckpointType::
CheckpointType (const CheckpointType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  SimulationData_ (x.SimulationData_, f, this),
  ParticleData_ (x.ParticleData_, f, this)
{
}

CheckpointType::
CheckpointType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  SimulationData_ (this),
  ParticleData_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void CheckpointType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // SimulationData
    //
    if (n.name () == "SimulationData" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< SimulationData_type > r (
        SimulationData_traits::create (i, f, this));

      if (!SimulationData_.present ())
      {
        this->SimulationData_.set (::std::move (r));
        continue;
      }
    }

    // ParticleData
    //
    if (n.name () == "ParticleData" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< ParticleData_type > r (
        ParticleData_traits::create (i, f, this));

      if (!ParticleData_.present ())
      {
        this->ParticleData_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!SimulationData_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SimulationData",
      "");
  }

  if (!ParticleData_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ParticleData",
      "");
  }
}

CheckpointType* CheckpointType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CheckpointType (*this, f, c);
}

CheckpointType& CheckpointType::
operator= (const CheckpointType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->SimulationData_ = x.SimulationData_;
    this->ParticleData_ = x.ParticleData_;
  }

  return *this;
}

CheckpointType::
~CheckpointType ()
{
}

// SimulationDataType
//

SimulationDataType::
SimulationDataType (const inputFile_type& inputFile,
                    const endTime_type& endTime,
                    const deltaT_type& deltaT,
                    const gravity_type& gravity)
: ::xml_schema::type (),
  inputFile_ (inputFile, this),
  endTime_ (endTime, this),
  deltaT_ (deltaT, this),
  gravity_ (gravity, this)
{
}

SimulationDataType::
SimulationDataType (const SimulationDataType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  inputFile_ (x.inputFile_, f, this),
  endTime_ (x.endTime_, f, this),
  deltaT_ (x.deltaT_, f, this),
  gravity_ (x.gravity_, f, this)
{
}

SimulationDataType::
SimulationDataType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  inputFile_ (this),
  endTime_ (this),
  deltaT_ (this),
  gravity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void SimulationDataType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // inputFile
    //
    if (n.name () == "inputFile" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< inputFile_type > r (
        inputFile_traits::create (i, f, this));

      if (!inputFile_.present ())
      {
        this->inputFile_.set (::std::move (r));
        continue;
      }
    }

    // endTime
    //
    if (n.name () == "endTime" && n.namespace_ ().empty ())
    {
      if (!endTime_.present ())
      {
        this->endTime_.set (endTime_traits::create (i, f, this));
        continue;
      }
    }

    // deltaT
    //
    if (n.name () == "deltaT" && n.namespace_ ().empty ())
    {
      if (!deltaT_.present ())
      {
        this->deltaT_.set (deltaT_traits::create (i, f, this));
        continue;
      }
    }

    // gravity
    //
    if (n.name () == "gravity" && n.namespace_ ().empty ())
    {
      if (!gravity_.present ())
      {
        this->gravity_.set (gravity_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!inputFile_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "inputFile",
      "");
  }

  if (!endTime_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "endTime",
      "");
  }

  if (!deltaT_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "deltaT",
      "");
  }

  if (!gravity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gravity",
      "");
  }
}

SimulationDataType* SimulationDataType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class SimulationDataType (*this, f, c);
}

SimulationDataType& SimulationDataType::
operator= (const SimulationDataType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->inputFile_ = x.inputFile_;
    this->endTime_ = x.endTime_;
    this->deltaT_ = x.deltaT_;
    this->gravity_ = x.gravity_;
  }

  return *this;
}

SimulationDataType::
~SimulationDataType ()
{
}

// ParticleDataType
//

ParticleDataType::
ParticleDataType ()
: ::xml_schema::type (),
  particle_ (this)
{
}

ParticleDataType::
ParticleDataType (const ParticleDataType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  particle_ (x.particle_, f, this)
{
}

ParticleDataType::
ParticleDataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  particle_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ParticleDataType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // particle
    //
    if (n.name () == "particle" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< particle_type > r (
        particle_traits::create (i, f, this));

      this->particle_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

ParticleDataType* ParticleDataType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ParticleDataType (*this, f, c);
}

ParticleDataType& ParticleDataType::
operator= (const ParticleDataType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->particle_ = x.particle_;
  }

  return *this;
}

ParticleDataType::
~ParticleDataType ()
{
}

// ExtendedParticleType
//

ExtendedParticleType::
ExtendedParticleType (const position_type& position,
                      const velocity_type& velocity,
                      const mass_type& mass,
                      const force_type& force,
                      const oldForce_type& oldForce)
: ::xml_schema::type (),
  position_ (position, this),
  velocity_ (velocity, this),
  mass_ (mass, this),
  type_ (this),
  force_ (force, this),
  oldForce_ (oldForce, this)
{
}

ExtendedParticleType::
ExtendedParticleType (::std::unique_ptr< position_type > position,
                      ::std::unique_ptr< velocity_type > velocity,
                      const mass_type& mass,
                      ::std::unique_ptr< force_type > force,
                      ::std::unique_ptr< oldForce_type > oldForce)
: ::xml_schema::type (),
  position_ (std::move (position), this),
  velocity_ (std::move (velocity), this),
  mass_ (mass, this),
  type_ (this),
  force_ (std::move (force), this),
  oldForce_ (std::move (oldForce), this)
{
}

ExtendedParticleType::
ExtendedParticleType (const ExtendedParticleType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  velocity_ (x.velocity_, f, this),
  mass_ (x.mass_, f, this),
  type_ (x.type_, f, this),
  force_ (x.force_, f, this),
  oldForce_ (x.oldForce_, f, this)
{
}

ExtendedParticleType::
ExtendedParticleType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  velocity_ (this),
  mass_ (this),
  type_ (this),
  force_ (this),
  oldForce_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ExtendedParticleType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (::std::move (r));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!this->type_)
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // force
    //
    if (n.name () == "force" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< force_type > r (
        force_traits::create (i, f, this));

      if (!force_.present ())
      {
        this->force_.set (::std::move (r));
        continue;
      }
    }

    // oldForce
    //
    if (n.name () == "oldForce" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< oldForce_type > r (
        oldForce_traits::create (i, f, this));

      if (!oldForce_.present ())
      {
        this->oldForce_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!force_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "force",
      "");
  }

  if (!oldForce_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "oldForce",
      "");
  }
}

ExtendedParticleType* ExtendedParticleType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExtendedParticleType (*this, f, c);
}

ExtendedParticleType& ExtendedParticleType::
operator= (const ExtendedParticleType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->velocity_ = x.velocity_;
    this->mass_ = x.mass_;
    this->type_ = x.type_;
    this->force_ = x.force_;
    this->oldForce_ = x.oldForce_;
  }

  return *this;
}

ExtendedParticleType::
~ExtendedParticleType ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::CheckpointType >
Checkpoint (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint (isrc, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint (isrc, h, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Checkpoint (isrc, h, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint (isrc, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint (isrc, h, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Checkpoint (isrc, h, f, p);
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::CheckpointType > (
    ::Checkpoint (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::CheckpointType > (
      ::Checkpoint (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::CheckpointType > r (
      ::xsd::cxx::tree::traits< ::CheckpointType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Checkpoint",
    "");
}

::std::unique_ptr< ::CheckpointType >
Checkpoint (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Checkpoint" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::CheckpointType > r (
      ::xsd::cxx::tree::traits< ::CheckpointType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Checkpoint",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
Checkpoint (::std::ostream& o,
            const ::CheckpointType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Checkpoint (::std::ostream& o,
            const ::CheckpointType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Checkpoint (::std::ostream& o,
            const ::CheckpointType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Checkpoint (::xercesc::XMLFormatTarget& t,
            const ::CheckpointType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Checkpoint (::xercesc::XMLFormatTarget& t,
            const ::CheckpointType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Checkpoint (::xercesc::XMLFormatTarget& t,
            const ::CheckpointType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Checkpoint (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Checkpoint (::xercesc::DOMDocument& d,
            const ::CheckpointType& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Checkpoint" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Checkpoint",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
Checkpoint (const ::CheckpointType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "Checkpoint",
      "",
      m, f));

  ::Checkpoint (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const CheckpointType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // SimulationData
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "SimulationData",
        e));

    s << i.SimulationData ();
  }

  // ParticleData
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ParticleData",
        e));

    s << i.ParticleData ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const SimulationDataType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // inputFile
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "inputFile",
        e));

    s << i.inputFile ();
  }

  // endTime
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "endTime",
        e));

    s << ::xml_schema::as_double(i.endTime ());
  }

  // deltaT
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "deltaT",
        e));

    s << ::xml_schema::as_double(i.deltaT ());
  }

  // gravity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gravity",
        e));

    s << ::xml_schema::as_double(i.gravity ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const ParticleDataType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // particle
  //
  for (ParticleDataType::particle_const_iterator
       b (i.particle ().begin ()), n (i.particle ().end ());
       b != n; ++b)
  {
    const ParticleDataType::particle_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "particle",
        e));

    s << x;
  }
}

void
operator<< (::xercesc::DOMElement& e, const ExtendedParticleType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // position
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "position",
        e));

    s << i.position ();
  }

  // velocity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "velocity",
        e));

    s << i.velocity ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // type
  //
  if (i.type ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "type",
        e));

    s << *i.type ();
  }

  // force
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "force",
        e));

    s << i.force ();
  }

  // oldForce
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "oldForce",
        e));

    s << i.oldForce ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

